import unittest

import kicad.symbols.element

class case(unittest.TestCase):

    def test_symbols_element_from_str_field(self):
        test = kicad.symbols.element.from_str('F1 "Text" 10 20 50 H V C CNN "Name"')
        self.assertIsInstance(test, kicad.symbols.element.field)
        self.assertEqual(test.type, kicad.symbols.type.field.name)
        self.assertEqual(test.value, 'Text')
        self.assertEqual(test.x, 10)
        self.assertEqual(test.y, 20)
        self.assertEqual(test.size, 50)
        self.assertEqual(test.orientation, kicad.symbols.type.orientation.horizontal)
        self.assertEqual(test.visibility, kicad.symbols.type.visibility.visible)
        self.assertEqual(test.hjustify, kicad.symbols.type.hjustify.center)
        self.assertEqual(test.vjustify, kicad.symbols.type.vjustify.center)
        self.assertEqual(test.style, kicad.symbols.type.style.none)

    def test_symbols_element_from_str_polygon(self):
        test = kicad.symbols.element.from_str('P 3 0 1 0 -50 50 50 0 -50 -50 F')
        self.assertIsInstance(test, kicad.symbols.element.polygon)
        self.assertEqual(len(test.points), 3)
        self.assertEqual(str(test.points[0]), '-50 50')
        self.assertEqual(str(test.points[1]), '50 0')
        self.assertEqual(str(test.points[2]), '-50 -50')
        self.assertEqual(test.unit, 0)
        self.assertEqual(test.representation, kicad.symbols.type.representation.normal)
        self.assertEqual(test.fill, kicad.symbols.type.fill.foreground)

        test = kicad.symbols.element.from_str('P 2 0 1 0 50 50 50 -50 N')
        self.assertIsInstance(test, kicad.symbols.element.polygon)
        self.assertEqual(len(test.points), 2)
        self.assertEqual(str(test.points[0]), '50 50')
        self.assertEqual(str(test.points[1]), '50 -50')
        self.assertEqual(test.unit, 0)
        self.assertEqual(test.representation, kicad.symbols.type.representation.normal)
        self.assertEqual(test.fill, kicad.symbols.type.fill.none)

    def test_symbols_element_from_str_rectangle(self):
        test = kicad.symbols.element.from_str('S 0 50 900 900 0 1 0 f')
        self.assertIsInstance(test, kicad.symbols.element.rectangle)
        self.assertEqual(test.x1, 0)
        self.assertEqual(test.y1, 50)
        self.assertEqual(test.x2, 900)
        self.assertEqual(test.y2, 900)
        self.assertEqual(test.unit, 0)
        self.assertEqual(test.representation, kicad.symbols.type.representation.normal)
        self.assertEqual(test.thickness, 0)
        self.assertEqual(test.fill, kicad.symbols.type.fill.background)

    def test_symbols_element_from_str_circle(self):
        test = kicad.symbols.element.from_str('C 10 20 70 2 1 5 F')
        self.assertIsInstance(test, kicad.symbols.element.circle)
        self.assertEqual(test.x, 10)
        self.assertEqual(test.y, 20)
        self.assertEqual(test.radius, 70)
        self.assertEqual(test.unit, 2)
        self.assertEqual(test.representation, kicad.symbols.type.representation.normal)
        self.assertEqual(test.thickness, 5)
        self.assertEqual(test.fill, kicad.symbols.type.fill.foreground)

        test = kicad.symbols.element.from_str('C 0 0 20 0 1 0 N')
        self.assertIsInstance(test, kicad.symbols.element.circle)
        self.assertEqual(test.x, 0)
        self.assertEqual(test.y, 0)
        self.assertEqual(test.radius, 20)
        self.assertEqual(test.unit, 0)
        self.assertEqual(test.representation, kicad.symbols.type.representation.normal)
        self.assertEqual(test.thickness, 0)
        self.assertEqual(test.fill, kicad.symbols.type.fill.none)

    def test_symbols_element_from_str_arc(self):
        test = kicad.symbols.element.from_str('A -1 -200 49 900 -11 0 1 0 N -50 -200 0 -150')
        self.assertIsInstance(test, kicad.symbols.element.arc)
        self.assertEqual(test.x, -1)
        self.assertEqual(test.y, -200)
        self.assertEqual(test.radius, 49)
        self.assertEqual(test.startAngle, 90.0)
        self.assertEqual(test.endAngle, -1.1)
        self.assertEqual(test.unit, 0)
        self.assertEqual(test.representation, kicad.symbols.type.representation.normal)
        self.assertEqual(test.thickness, 0)
        self.assertEqual(test.fill, kicad.symbols.type.fill.none)
        self.assertEqual(test.startX, -50)
        self.assertEqual(test.startY, -200)
        self.assertEqual(test.endX, 0)
        self.assertEqual(test.endY, -150)

        test = kicad.symbols.element.from_str('A 0 -199 49 0 -911 0 1 0 N 0 -150 50 -200')
        self.assertIsInstance(test, kicad.symbols.element.arc)
        self.assertEqual(test.x, 0)
        self.assertEqual(test.y, -199)
        self.assertEqual(test.radius, 49)
        self.assertEqual(test.startAngle, 0.0)
        self.assertEqual(test.endAngle, -91.1)
        self.assertEqual(test.unit, 0)
        self.assertEqual(test.representation, kicad.symbols.type.representation.normal)
        self.assertEqual(test.thickness, 0)
        self.assertEqual(test.fill, kicad.symbols.type.fill.none)
        self.assertEqual(test.startX, 0)
        self.assertEqual(test.startY, -150)
        self.assertEqual(test.endX, 50)
        self.assertEqual(test.endY, -200)

    def test_symbols_element_from_str_text(self):
        # Old format
        test = kicad.symbols.element.from_str('T 0 -320 -10 100 0 0 1 VREF')
        self.assertIsInstance(test, kicad.symbols.element.text)
        self.assertEqual(test.x, -320)
        self.assertEqual(test.y, -10)
        self.assertEqual(test.value, 'VREF')
        self.assertEqual(test.size, 100)
        self.assertEqual(test.angle, 0.0)
        self.assertEqual(test.unit, 0)
        self.assertEqual(test.representation, kicad.symbols.type.representation.normal)
        self.assertEqual(test.italic, kicad.symbols.type.italic.off)
        self.assertEqual(test.bold, kicad.symbols.type.bold.off)
        self.assertEqual(test.hjustify, kicad.symbols.type.hjustify.center)
        self.assertEqual(test.vjustify, kicad.symbols.type.vjustify.center)

        test = kicad.symbols.element.from_str('T 1 20 10 50 0 2 0 TEXT~SPACE')
        self.assertIsInstance(test, kicad.symbols.element.text)
        self.assertEqual(test.x, 20)
        self.assertEqual(test.y, 10)
        self.assertEqual(test.value, 'TEXT SPACE')
        self.assertEqual(test.size, 50)
        self.assertEqual(test.angle, 90.0)
        self.assertEqual(test.unit, 2)
        self.assertEqual(test.representation, kicad.symbols.type.representation.both)
        self.assertEqual(test.italic, kicad.symbols.type.italic.off)
        self.assertEqual(test.bold, kicad.symbols.type.bold.off)
        self.assertEqual(test.hjustify, kicad.symbols.type.hjustify.center)
        self.assertEqual(test.vjustify, kicad.symbols.type.vjustify.center)

        # New format
        test = kicad.symbols.element.from_str('T 0 200 100 50 0 0 1 "Text with space" Normal 0 C C')
        self.assertIsInstance(test, kicad.symbols.element.text)
        self.assertEqual(test.x, 200)
        self.assertEqual(test.y, 100)
        self.assertEqual(test.value, 'Text with space')
        self.assertEqual(test.size, 50)
        self.assertEqual(test.angle, 0.0)
        self.assertEqual(test.unit, 0)
        self.assertEqual(test.representation, kicad.symbols.type.representation.normal)
        self.assertEqual(test.italic, kicad.symbols.type.italic.off)
        self.assertEqual(test.bold, kicad.symbols.type.bold.off)
        self.assertEqual(test.hjustify, kicad.symbols.type.hjustify.center)
        self.assertEqual(test.vjustify, kicad.symbols.type.vjustify.center)

        test = kicad.symbols.element.from_str('T 450 10 20 50 0 0 1 "A\'\'B" Normal 0 C C')
        self.assertIsInstance(test, kicad.symbols.element.text)
        self.assertEqual(test.x, 10)
        self.assertEqual(test.y, 20)
        self.assertEqual(test.value, 'A"B')
        self.assertEqual(test.size, 50)
        self.assertEqual(test.angle, 45.0)
        self.assertEqual(test.unit, 0)
        self.assertEqual(test.representation, kicad.symbols.type.representation.normal)
        self.assertEqual(test.italic, kicad.symbols.type.italic.off)
        self.assertEqual(test.bold, kicad.symbols.type.bold.off)
        self.assertEqual(test.hjustify, kicad.symbols.type.hjustify.center)
        self.assertEqual(test.vjustify, kicad.symbols.type.vjustify.center)

        test = kicad.symbols.element.from_str('T 450 10 20 50 0 0 1 "Test" Normal 0 L T')
        self.assertIsInstance(test, kicad.symbols.element.text)
        self.assertEqual(test.x, 10)
        self.assertEqual(test.y, 20)
        self.assertEqual(test.value, 'Test')
        self.assertEqual(test.size, 50)
        self.assertEqual(test.angle, 45.0)
        self.assertEqual(test.unit, 0)
        self.assertEqual(test.representation, kicad.symbols.type.representation.normal)
        self.assertEqual(test.italic, kicad.symbols.type.italic.off)
        self.assertEqual(test.bold, kicad.symbols.type.bold.off)
        self.assertEqual(test.hjustify, kicad.symbols.type.hjustify.left)
        self.assertEqual(test.vjustify, kicad.symbols.type.vjustify.top)

        test = kicad.symbols.element.from_str('T 450 10 20 50 0 0 1 "Test" Normal 0 R B')
        self.assertIsInstance(test, kicad.symbols.element.text)
        self.assertEqual(test.x, 10)
        self.assertEqual(test.y, 20)
        self.assertEqual(test.value, 'Test')
        self.assertEqual(test.size, 50)
        self.assertEqual(test.angle, 45.0)
        self.assertEqual(test.unit, 0)
        self.assertEqual(test.representation, kicad.symbols.type.representation.normal)
        self.assertEqual(test.italic, kicad.symbols.type.italic.off)
        self.assertEqual(test.bold, kicad.symbols.type.bold.off)
        self.assertEqual(test.hjustify, kicad.symbols.type.hjustify.right)
        self.assertEqual(test.vjustify, kicad.symbols.type.vjustify.bottom)

        test = kicad.symbols.element.from_str('T 450 10 20 50 0 0 1 "Test" Italic 1 C C')
        self.assertIsInstance(test, kicad.symbols.element.text)
        self.assertEqual(test.x, 10)
        self.assertEqual(test.y, 20)
        self.assertEqual(test.value, 'Test')
        self.assertEqual(test.size, 50)
        self.assertEqual(test.angle, 45.0)
        self.assertEqual(test.unit, 0)
        self.assertEqual(test.representation, kicad.symbols.type.representation.normal)
        self.assertEqual(test.italic, kicad.symbols.type.italic.on)
        self.assertEqual(test.bold, kicad.symbols.type.bold.on)
        self.assertEqual(test.hjustify, kicad.symbols.type.hjustify.center)
        self.assertEqual(test.vjustify, kicad.symbols.type.vjustify.center)

    def test_symbols_element_from_str_pin(self):
        test = kicad.symbols.element.from_str('X TO 1 -200 0 150 R 40 40 1 1 P')
        self.assertIsInstance(test, kicad.symbols.element.pin)
        self.assertEqual(test.x, -200)
        self.assertEqual(test.y, 0)
        self.assertEqual(test.name, 'TO')
        self.assertEqual(test.number, '1')
        self.assertEqual(test.length, 150)
        self.assertEqual(test.direction, kicad.symbols.type.direction.left)
        self.assertEqual(test.nameSize, 40)
        self.assertEqual(test.numberSize, 40)
        self.assertEqual(test.unit, 1)
        self.assertEqual(test.representation, kicad.symbols.type.representation.normal)
        self.assertEqual(test.electric, kicad.symbols.type.electric.passive)
        self.assertEqual(test.shape, kicad.symbols.type.shape.line)
        self.assertTrue(test.visible)

        test = kicad.symbols.element.from_str('X K 2 200 0 150 L 40 40 1 1 P')
        self.assertIsInstance(test, kicad.symbols.element.pin)
        self.assertEqual(test.x, 200)
        self.assertEqual(test.y, 0)
        self.assertEqual(test.name, 'K')
        self.assertEqual(test.number, '2')
        self.assertEqual(test.length, 150)
        self.assertEqual(test.direction, kicad.symbols.type.direction.right)
        self.assertEqual(test.nameSize, 40)
        self.assertEqual(test.numberSize, 40)
        self.assertEqual(test.unit, 1)
        self.assertEqual(test.representation, kicad.symbols.type.representation.normal)
        self.assertEqual(test.electric, kicad.symbols.type.electric.passive)
        self.assertEqual(test.shape, kicad.symbols.type.shape.line)
        self.assertTrue(test.visible)

        test = kicad.symbols.element.from_str('X 0 1 0 0 0 R 40 40 1 1 W NC')
        self.assertIsInstance(test, kicad.symbols.element.pin)
        self.assertEqual(test.x, 0)
        self.assertEqual(test.y, 0)
        self.assertEqual(test.name, '0')
        self.assertEqual(test.number, '1')
        self.assertEqual(test.length, 0)
        self.assertEqual(test.direction, kicad.symbols.type.direction.left)
        self.assertEqual(test.nameSize, 40)
        self.assertEqual(test.numberSize, 40)
        self.assertEqual(test.unit, 1)
        self.assertEqual(test.representation, kicad.symbols.type.representation.normal)
        self.assertEqual(test.electric, kicad.symbols.type.electric.power_input)
        self.assertEqual(test.shape, kicad.symbols.type.shape.clock)
        self.assertFalse(test.visible)

        test = kicad.symbols.element.from_str('X ~ 2 0 -250 200 U 40 40 1 1 P')
        self.assertIsInstance(test, kicad.symbols.element.pin)
        self.assertEqual(test.x, 0)
        self.assertEqual(test.y, -250)
        self.assertEqual(test.name, '~')
        self.assertEqual(test.number, '2')
        self.assertEqual(test.length, 200)
        self.assertEqual(test.direction, kicad.symbols.type.direction.down)
        self.assertEqual(test.nameSize, 40)
        self.assertEqual(test.numberSize, 40)
        self.assertEqual(test.unit, 1)
        self.assertEqual(test.representation, kicad.symbols.type.representation.normal)
        self.assertEqual(test.electric, kicad.symbols.type.electric.passive)
        self.assertEqual(test.shape, kicad.symbols.type.shape.line)
        self.assertTrue(test.visible)

    def test_symbols_element_from_str_raise(self):
        with self.assertRaises(KeyError):
            kicad.symbols.element.from_str('Z')
